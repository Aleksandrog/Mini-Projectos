from time import sleep
from datetime import datetime


def calculator():
    print('[1] - Calculator;'
          '\n[2] - Exit')
    tool = int(input('> Option: '))
    if tool == 1:
        date = datetime.now()
        sys_date = str(date.strftime("%d-%m-%Y %H:%M:%S"))
        sys_log = open("logs.txt", "a")
        sys_log.write(f"[{sys_date}] Calculator selected\n")
        sys_log.close()
        print()
        print('Entering in Calculator...')
        sleep(3)
        print()
        print('Select the calculator type:'
              '\n[1] - Normal calculator;'
              '\n[2] - Binary/Hexadecimal/Octal Calculator;'
              '\n[3] - Exit; ')
        calc_option = int(input('> Option: '))

        if calc_option == 1:
            n1 = float(input('Number 1: '))
            n2 = float(input('Number 2: '))
            print('Operations:'
                  '\n[1] + '
                  '\n[2] - '
                  '\n[3] * '
                  '\n[4] / ')
            operation = int(input('> Operation: '))

            if operation == 1:
                total = n1 + n2
                print(f'Result: {total}.')
            elif operation == 2:
                total = n1 - n2
                print(f'Result: {total}')
            elif operation == 3:
                total = n1 * n2
                print(f'Result: {total}')
            elif operation == 4:
                total = n1 / n2
                print(f'Result: {total}')
        elif calc_option == 2:
            print('[1] - Binary/Hexadecimal/Octal Converter;'
                  '\n[2] - Binary/Hexadecimal/Octal Deconverter;')
            bho_option = int(input('> Option: '))

            if bho_option == 1:
                print('[1] - Binary Converter;'
                      '\n[2] - Hexadecimal Converter;'
                      '\n[3] - Octal converter;')
                bho_converter_option = int(input('> Option: '))
                if bho_converter_option == 1:
                    number = int(input('Number: '))
                    binary = bin(number)[2:]
                    print(f'Number converted to binary: {binary}')

                elif bho_converter_option == 2:
                    number = int(input('Number: '))
                    hexadecimal = hex(number)[2:]
                    print(f'Number converted to hexadecimal: {hexadecimal}')

                elif bho_converter_option == 3:
                    number = int(input('Number: '))
                    octal = oct(number)[2:]
                    print(f'Number converted to octal: {octal}')

            elif bho_option == 2:
                print('[1] - Binary Deconverter;'
                      '\n[2] - Decimal Deconverter;'
                      '\n[3] - Octal Deconverter;')
                bho_converter_option = int(input('> Option: '))

                if bho_converter_option == 1:
                    number = int(input('Number: '))
                    binary_number_deconverted = number & 2
                    print(f'Binary number deconverted: {binary_number_deconverted}')

                elif bho_converter_option == 2:
                    number = int(input('Number: '))
                    hexadecimal_number_deconverted = number & 10
                    print(f'Hexadecimal number deconverted: {hexadecimal_number_deconverted}')

                elif bho_converter_option == 3:
                    number = int(input('Number: '))
                    octal_number_converted = number & 8
                    print(f'Octal number deconverted: {octal_number_converted}')

        elif calc_option == 3:
            print('Quitting Calculator ...')
            sleep(1)
            print('Calculator Quitted.')
    elif tool == 2:
        date = datetime.now()
        sys_date = str(date.strftime("%d-%m-%Y %H:%M:%S"))

        sys_log = open("logs.txt", "a")
        sys_log.write(f"[{sys_date}] Calculator Quitted.")
        sys_log.close()

    while tool != 2:
        print('[1] - Calculator;'
              '\n[2] - Exit')
        tool = int(input('> Option: '))
        if tool == 1:
            date = datetime.now()
            sys_date = str(date.strftime("%d-%m-%Y %H:%M:%S"))
            sys_log = open("logs.txt", "a")
            sys_log.write(f"[{sys_date}] Calculator selected\n")
            sys_log.close()
            print()
            print('Entering in Calculator...')
            sleep(3)
            print()
            print('Select the calculator type:'
                  '\n[1] - Normal calculator;'
                  '\n[2] - Binary/Hexadecimal/Octal Calculator;'
                  '\n[3] - Exit; ')
            calc_option = int(input('> Option: '))

            if calc_option == 1:
                n1 = float(input('Number 1: '))
                n2 = float(input('Number 2: '))
                print('Operations:'
                      '\n[1] + ;'
                      '\n[2] - '
                      '\n[3] * '
                      '\n[4] / ')
                operation = int(input('> Operation: '))

                if operation == 1:
                    total = n1 + n2
                    print(f'Result: {total}.')
                elif operation == 2:
                    total = n1 - n2
                    print(f'Result: {total}')
                elif operation == 3:
                    total = n1 * n2
                    print(f'Result: {total}')
                elif operation == 4:
                    total = n1 / n2
                    print(f'Result: {total}')
            elif calc_option == 2:
                print('[1] - Binary/Hexadecimal/Octal Converter;'
                      '\n[2] - Binary/Hexadecimal/Octal Deconverter;')
                bho_option = int(input('> Option: '))

                if bho_option == 1:
                    print('[1] - Binary Converter;'
                          '\n[2] - Hexadecimal Converter;'
                          '\n[3] - Octal converter;')
                    bho_converter_option = int(input('> Option: '))
                    if bho_converter_option == 1:
                        number = int(input('Number: '))
                        binary = bin(number)[2:]
                        print(f'Number converted to binary: {binary}')

                    elif bho_converter_option == 2:
                        number = int(input('Number: '))
                        hexadecimal = hex(number)[2:]
                        print(f'Number converted to hexadecimal: {hexadecimal}')

                    elif bho_converter_option == 3:
                        number = int(input('Number: '))
                        octal = oct(number)[2:]
                        print(f'Number converted to octal: {octal}')

                elif bho_option == 2:
                    print('[1] - Binary Deconverter;'
                          '\n[2] - Decimal Deconverter;'
                          '\n[3] - Octal Deconverter;')
                    bho_converter_option = int(input('> Option: '))

                    if bho_converter_option == 1:
                        number = int(input('Number: '))
                        binary_number_deconverted = number & 2
                        print(f'Binary number deconverted: {binary_number_deconverted}')

                    elif bho_converter_option == 2:
                        number = int(input('Number: '))
                        hexadecimal_number_deconverted = number & 10
                        print(f'Hexadecimal number deconverted: {hexadecimal_number_deconverted}')

                    elif bho_converter_option == 3:
                        number = int(input('Number: '))
                        octal_number_converted = number & 8
                        print(f'Octal number deconverted: {octal_number_converted}')

            elif calc_option == 3:
                print('Quitting Calculator ...')
                sleep(1)
                print('Calculator Quitted.')

        elif tool == 2:
            date = datetime.now()
            sys_date = str(date.strftime("%d-%m-%Y %H:%M:%S"))

            sys_log = open("logs.txt", "a")
            sys_log.write(f"[{sys_date}] Calculator Quitted.")
            sys_log.close()
            
            
            
            
            
            
            """ Web Crawler
----------------------------------------
"""
import re
import sys
import time
import math
import urllib2
import urlparse
import optparse
import hashli
from cgi import escape
from traceback import format_exc
from Queue import Queue, Empty as QueueEmpty
from bs4 import BeautifulSoup
class Link (object):
    def __init__(self, src, dst, link_type):
        self.src = src
        self.dst = dst
        self.link_type = link_type
    def __hash__(self):
        return hash((self.src, self.dst, self.link_type))
    def __eq__(self, other):
        return (self.src == other.src and
                self.dst == other.dst and
                self.link_type == other.link_type)
    def __str__(self):
        return self.src + " -> " + self.dst
class Crawler(object):
    def __init__(self, root, depth_limit, confine=None, exclude=[], locked=True, filter_seen=True):
        self.root = root
        self.host = urlparse.urlparse(root)[1]
        ## Data for filters:
        self.depth_limit = depth_limit # Max depth (number of hops from root)
        self.locked = locked           # Limit search to a single host?
        self.confine_prefix=confine    # Limit search to this prefix
        self.exclude_prefixes=exclude; # URL prefixes NOT to visit
        self.urls_seen = set()          # Used to avoid putting duplicates in queue
        self.urls_remembered = set()    # For reporting to user
        self.visited_links= set()       # Used to avoid re-processing a page
        self.links_remembered = set()   # For reporting to user
        self.num_links = 0              # Links found (and not excluded by filters)
        self.num_followed = 0           # Links followed.  
        # Pre-visit filters:  Only visit a URL if it passes these tests
        self.pre_visit_filters=[self._prefix_ok,
                                self._exclude_ok,
                                self._not_visited,
                                self._same_host]

        
        if filter_seen:
            self.out_url_filters=[self._prefix_ok,
                                     self._same_host]
        else:
            self.out_url_filters=[]
    def _pre_visit_url_condense(self, url):
        """ Reduce (condense) URLs into some canonical form before
        visiting.  All occurrences of equivalent URLs are treated as
        identical.
        All this does is strip the \"fragment\" component from URLs,
        so that http://foo.com/blah.html\#baz becomes
        http://foo.com/blah.html """
        base, frag = urlparse.urldefrag(url)
        return base
   
    def _prefix_ok(self, url):
        """Pass if the URL has the correct prefix, or none is specified"""
        return (self.confine_prefix is None  or
                url.startswith(self.confine_prefix))
    def _exclude_ok(self, url):
        """Pass if the URL does not match any exclude patterns"""
        prefixes_ok = [ not url.startswith(p) for p in self.exclude_prefixes]
        return all(prefixes_ok)
    def _not_visited(self, url):
        """Pass if the URL has not already been visited"""
        return (url not in self.visited_links)
    def _same_host(self, url):
        """Pass if the URL is on the same host as the root URL"""
        try: 
            host = urlparse.urlparse(url)[1]
            return re.match(".*%s" % self.host, host) 
      except Exception, e: 
            print >> sys.stderr, "ERROR: Can't process url '%s' (%s)" % (url, e)
            return False
    def crawl(self):
        """ Main function in the crawling process.  Core algorithm is:
        q <- starting page
        while q not empty:
           url <- q.get()
           if url is new and suitable:
              page <- fetch(url)   
              q.put(urls found in page)
           else:
              nothing
        new and suitable means that we don't re-visit URLs we've seen
        already fetched, and user-supplied criteria like maximum
        search depth are checked. """
        q = Queue()
        q.put((self.root, 0))
        while not q.empty():
            this_url, depth = q.get()
            #Non-URL-specific filter: Discard anything over depth limit
            if depth > self.depth_limit:
                continue
            //Apply URL-based filters.
            do_not_follow = [f for f in self.pre_visit_filters if not f(this_url)]
            #Special-case depth 0 (starting URL)
            if depth == 0 and [] != do_not_follow:
                print >> sys.stderr, "Whoops! Starting URL %s rejected by the following filters:", do_not_follow
           //If no filters failed (that is, all passed), process URL
            if [] == do_not_follow:
                try:
                    self.visited_links.add(this_url)
                    self.num_followed += 1
                    page = Fetcher(this_url)
                    page.fetch()
                    for link_url in [self._pre_visit_url_condense(l) for l in page.out_links()]:
                        if link_url not in self.urls_seen:
                            q.put((link_url, depth+1))
                            self.urls_seen.add(link_url)
                        do_not_remember = [f for f in self.out_url_filters if not f(link_url)]
                        if [] == do_not_remember:
                                self.num_links += 1
                                self.urls_remembered.add(link_url)
                                link = Link(this_url, link_url, "href")
                                if link not in self.links_remembered:
                                    self.links_remembered.add(link)
                except Exception, e:
                    print >>sys.stderr, "ERROR: Can't process url '%s' (%s)" % (this_url, e)
                    #print format_exc()
class OpaqueDataException (Exception):
    def __init__(self, message, mimetype, url):
        Exception.__init__(self, message)
        self.mimetype=mimetype
        self.url=url
class Fetcher(object):
    """The name Fetcher is a slight misnomer: This class retrieves and interprets web pages."""
    def __init__(self, url):
        self.url = url
        self.out_urls = []
    def __getitem__(self, x):
        return self.out_urls[x]
    def out_links(self):
        return self.out_urls
    //def _addHeaders(self, request):
    //    request.add_header("User-Agent", AGENT)
    def _open(self):
        url = self.url
        try:
            request = urllib2.Request(url)
            handle = urllib2.build_opener()
        except IOError:
            return None
        return (request, handle)
    def fetch(self):
        request, handle = self._open()
        #self._addHeaders(request)
        if handle:
            try:
                data=handle.open(request)
                mime_type=data.info().gettype()
                url=data.geturl();
                if mime_type != "text/html":
                    raise OpaqueDataException("Not interested in files of type %s" % mime_type,
                                              mime_type, url)
                content = unicode(data.read(), "utf-8",
                        errors="replace")
                soup = BeautifulSoup(content)
                tags = soup('a')
            except urllib2.HTTPError, error:
                if error.code == 404:
                    print >> sys.stderr, "ERROR: %s -> %s" % (error, error.url)
                else:
                    print >> sys.stderr, "ERROR: %s" % error
                tags = []
            except urllib2.URLError, error:
                print >> sys.stderr, "ERROR: %s" % error
                tags = []
            except OpaqueDataException, error:
                print >>sys.stderr, "Skipping %s, has type %s" % (error.url, error.mimetype)
                tags = []
            for tag in tags:
                href = tag.get("href")
                if href is not None:
                    url = urlparse.urljoin(self.url, escape(href))
                    if url not in self:
                        self.out_urls.append(url)
def getLinks(url):
    page = Fetcher(url)
    page.fetch()
    """for i, url in enumerate(page):
        print "%d. %s" % (i, url) """
    j = 1
    for i, url in enumerate(page):
        if url.find("http")>=0:
            print "%d. %s" % (j, url)
            j = j + 1
def parse_options():
    """parse_options() -> opts, args
    Parse any command-line options given returning both
    the parsed options and arguments.
    """
    parser = optparse.OptionParser()
    parser.add_option("-q", "--quiet",
            action="store_true", default=False, dest="quiet",
            help="Enable quiet mode")
    parser.add_option("-l", "--links",
            action="store_true", default=False, dest="links",
            help="Get links for specified url only")    
    parser.add_option("-d", "--depth",
            action="store", type="int", default=30, dest="depth_limit",
            help="Maximum depth to traverse")
    parser.add_option("-c", "--confine",
            action="store", type="string", dest="confine",
            help="Confine crawl to specified prefix")
    parser.add_option("-x", "--exclude", action="append", type="string",
                      dest="exclude", default=[], help="Exclude URLs by prefix")
    parser.add_option("-L", "--show-links", action="store_true", default=False,
                      dest="out_links", help="Output links found")
    parser.add_option("-u", "--show-urls", action="store_true", default=False,
                      dest="out_urls", help="Output URLs found")
    parser.add_option("-D", "--dot", action="store_true", default=False,
                      dest="out_dot", help="Output Graphviz dot file")
    opts, args = parser.parse_args()
    if len(args) < 1:
        parser.print_help(sys.stderr)
        raise SystemExit, 1
    if opts.out_links and opts.out_urls:
        parser.print_help(sys.stderr)
        parser.error("options -L and -u are mutually exclusive")
    return opts, args
class DotWriter:
    """ Formats a collection of Link objects as a Graphviz (Dot)
    graph.  Mostly, this means creating a node for each URL with a
    name which Graphviz will accept, and declaring links between those
    nodes."""
    def __init__ (self):
        self.node_alias = {}
    def _safe_alias(self, url, silent=False):
        """Translate URLs into unique strings guaranteed to be safe as
        node names in the Graphviz language.  Currently, that's based
        on the md5 digest, in hexadecimal."""
        if url in self.node_alias:
            return self.node_alias[url]
        else:
            m = hashlib.md5()
            m.update(url)
            name = "N"+m.hexdigest()
            self.node_alias[url]=name
            if not silent:
                print "\t%s [label=\"%s\"];" % (name, url)                
            return name
    def asDot(self, links):
        """ Render a collection of Link objects as a Dot graph"""
        print "digraph Crawl {"
        print "\t edge [K=0.2, len=0.1];"
        for l in links:            
            print "\t" + self._safe_alias(l.src) + " -> " + self._safe_alias(l.dst) + ";"
        print  "}"
def main():    
    opts, args = parse_options()
    url = args[0]
    if opts.links:
        getLinks(url)
        raise SystemExit, 0
    depth_limit = opts.depth_limit
    confine_prefix=opts.confine
    exclude=opts.exclude
    sTime = time.time()
    print >> sys.stderr,  "Crawling %s (Max Depth: %d)" % (url, depth_limit)
    crawler = Crawler(url, depth_limit, confine_prefix, exclude)
    crawler.crawl()
    if opts.out_urls:
        print "\n".join(crawler.urls_seen)
    if opts.out_links:
        print "\n".join([str(l) for l in crawler.links_remembered])
    if opts.out_dot:
        d = DotWriter()
        d.asDot(crawler.links_remembered)
    eTime = time.time()
    tTime = eTime - sTime
    print >> sys.stderr, "Found:    %d" % crawler.num_links
    print >> sys.stderr, "Followed: %d" % crawler.num_followed
    print >> sys.stderr, "Stats:    (%d/s after %0.2fs)" % (
            int(math.ceil(float(crawler.num_links) / tTime)), tTime)
if __name__ == "__main__":
    main()
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            """ Plagiarism Checker
----------------------------------------
"""
import click
from .matcher import Text, ExtendedMatch, Matcher
import os
import glob
import csv
import logging
import itertools
logger = logging.getLogger()
logger.setLevel(logging.INFO)
def getFiles(path): 
    """ 
    Determines whether a path is a file or directory. 
    If it's a directory, it gets a list of all the text files 
    in that directory, recursively. If not, it gets the file. 
    """
    if os.path.isfile(path): 
        return [path]
    elif os.path.isdir(path): 
        return glob.glob(path + "/**/*.txt", recursive=True)
    else: 
        raise click.ClickException("The path %s doesn't appear to be a file or directory" % path) 
def checkLog(logfile, textpair): 
    """ 
    Checks the log file to make sure we haven't already done a particular analysis. 
    Returns True if the pair is in the log already. 
    """
    pairs = []
    logging.debug('Looking in the log for textpair:' % textpair)
    if not os.path.isfile(logfile): 
        logging.debug('No log file found.')
        return None
    with open(logfile, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            pairs.append([row[0], row[1]])
    return textpair in pairs
def createLog(logfile, columnLabels): 
    """ 
    Creates a log file and sets up headers so that it can be easily read 
    as a CSV later. 
    """
    header = ','.join(columnLabels) + '\n'
    with open(logfile, 'w') as f: 
        f.write(header) 
        f.close
@click.command()
@click.argument('text1')
@click.argument('text2') 
@click.option('-t', '--threshold', type=int, default=3, \
        help='The shortest length of match to include in the list of initial matches.')
@click.option('-c', '--cutoff', type=int, default=5, \
        help='The shortest length of match to include in the final list of extended matches.')
@click.option('-n', '--ngrams', type=int, default=3, \
        help='The ngram n-value to match against.')
@click.option('-l', '--logfile', default='log.txt', help='The name of the log file to write to.'
@click.option('--stops', is_flag=True, help='Include stopwords in matching.', default=False)
@click.option('--verbose', is_flag=True, help='Enable verbose mode, giving more information.')
def cli(text1, text2, threshold, cutoff, ngrams, logfile, verbose, stops):  
    """ This program finds similar text in two text files. """ 
    texts1 = getFiles(text1)
    texts2 = getFiles(text2) 
    if verbose: 
        logging.basicConfig(level=logging.DEBUG)
    if stops: 
        logging.debug('Including stopwords in tokenizing.') 
    logging.debug('Comparing this/these text(s): %s' % str(texts1))
    logging.debug('with this/these text(s): %s' % str(texts2))
    pairs = list(itertools.product(texts1, texts2))
    numPairs = len(pairs) 
    logging.debug('Comparing %s pairs.' % numPairs)
    logging.debug('Loading files into memory.')
    texts = {}
    prevTextObjs = {}
    for filename in texts1+texts2: 
        with open(filename, errors="ignore") as f: 
            text = f.read() 
        if filename not in texts: 
            texts[filename] = text
    logging.debug('Loading complete.')
    for index, pair in enumerate(pairs): 
        timeStart = os.times().elapsed
        logging.debug('Now comparing pair %s of %s.' % (index+1, numPairs))
        logging.debug('Comparing %s with %s.' % (pair[0], pair[1]))
            columnLabels = ['Text A', 'Text B', 'Threshold', 'Cutoff', 'N-Grams', 'Num Matches', 'Text A Length', 'Text B Length', 'Locations in A', 'Locations in B']
            logging.debug('No log file found. Setting one up.')
            createLog(logfile, columnLabels)
        if inLog: 
            logging.debug('This pair is already in the log. Skipping.')
            continue
        logging.debug('Processing texts.')
        filenameA, filenameB = pair[0], pair[1]
        textA, textB = texts[filenameA], texts[filenameB]
        for filename in [filenameA, filenameB]: 
            if filename not in prevTextObjs: 
                logging.debug('Processing text: %s' % filename)
                prevTextObjs[filename] = Text(texts[filename], filename)
       
        textObjA = prevTextObjs[filenameA]
        textObjB = prevTextObjs[filenameB]
        myMatch = Matcher(textObjA, textObjB, threshold=threshold, cutoff=cutoff, ngramSize=ngrams, removeStopwords=stops)
        myMatch.match()
        timeEnd = os.times().elapsed
        timeElapsed = timeEnd-timeStart
        logging.debug('Matching completed in %s seconds.' % timeElapsed)
        
        if myMatch.numMatches > 0: 
            logItems = [pair[0], pair[1], threshold, cutoff, ngrams, myMatch.numMatches, myMatch.textA.length, myMatch.textB.length, str(myMatch.locationsA), str(myMatch.locationsB)]
            logging.debug('Logging items: %s' % str(logItems))
            line = ','.join(['"%s"' % item for item in logItems]) + '\n'
            f = open(logfile, 'a')
            f.write(line)
            f.close()
if __name__ == '__main__':
    cli()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    """ Calculator
----------------------------------------
"""
def addition ():
    print("Addition")
    n = float(input("Enter the number: "))
    t = 0 #Total number enter
    ans = 0
    while n != 0:
        ans = ans + n
        t+=1
        n = float(input("Enter another number (0 to calculate): "))
    return [ans,t]
def subtraction ():
    print("Subtraction");
    n = float(input("Enter the number: "))
    t = 0 #Total number enter
    sum = 0
    while n != 0:
        ans = ans - n
        t+=1
        n = float(input("Enter another number (0 to calculate): "))
    return [ans,t]
def multiplication ():
    print("Multiplication")
    n = float(input("Enter the number: "))
    t = 0 #Total number enter
    ans = 1
    while n != 0:
        ans = ans * n
        t+=1
        n = float(input("Enter another number (0 to calculate): "))
    return [ans,t]
def average():
    an = []
    an = addition()
    t = an[1]
    a = an[0]
    ans = a / t
    return [ans,t]
    
#main...
while True:
    list = []
    print(" Enter 'a' for addition")
    print(" Enter 's' for substraction")
    print(" Enter 'm' for multiplication")
    print(" Enter 'v' for average")
    print(" Enter 'q' for quit")
    c = input(" ")
    if c != 'q':
        if c == 'a':
            list = addition()
            print("Ans = ", list[0], " total inputs ",list[1])
        elif c == 's':
            list = subtraction()
            print("Ans = ", list[0], " total inputs ",list[1])
        elif c == 'm':
            list = multiplication()
            print("Ans = ", list[0], " total inputs ",list[1])
        elif c == 'v':
            list = average()
            print("Ans = ", list[0], " total inputs ",list[1])
        else:
            print ("Sorry, invilid character")
    else:
        break
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        """ Binary Search Algorithm 
----------------------------------------
"""
#iterative implementation of binary search in Python
def binary_search(a_list, item):
    """Performs iterative binary search to find the position of an integer in a given, sorted, list.
    a_list -- sorted list of integers
    item -- integer you are searching for the position of
    """
    first = 0
    last = len(a_list) - 1
    while first <= last:
        i = (first + last) / 2
        if a_list[i] == item:
            return ' found at position '.format(item=item, i=i)
        elif a_list[i] > item:
            last = i - 1
        elif a_list[i] < item:
            first = i + 1
        else:
            return ' not found in the list'.format(item=item)
#recursive implementation of binary search in Python
def binary_search_recursive(a_list, item):
    """Performs recursive binary search of an integer in a given, sorted, list.
    a_list -- sorted list of integers
    item -- integer you are searching for the position of
    """
    first = 0
    last = len(a_list) - 1
    if len(a_list) == 0:
        return ' was not found in the list'.format(item=item)
    else:
        i = (first + last) // 2
        if item == a_list[i]:
            return ' found'.format(item=item)
        else:
            if a_list[i] < item:
                return binary_search_recursive(a_list[i+1:], item)
            else:
                return binary_search_recursive(a_list[:i], item)
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                """ Mad Libs Generator
----------------------------------------
"""
#loop back to this point once code finishes
loop = 1
while (loop < 10):
#All the questions that the program asks the user
    noun = input("Choose a noun: ")
    p_noun = input("Choose a plural noun: ")
    noun2 = input("Choose a noun: ")
    place = input("Name a place: ")
    adjective = input("Choose an adjective (Describing word): ")
    noun3 = input("Choose a noun: ")
#Displays the story based on the users input
    print ("------------------------------------------")
    print ("Be kind to your",noun,"- footed", p_noun)
    print ("For a duck may be somebody's", noun2,",")
    print ("Be kind to your",p_noun,"in",place)
    print ("Where the weather is always",adjective,".")
    print ()
    print ("You may think that is this the",noun3,",")
    print ("Well it is.")
    print ("------------------------------------------")
#Loop back to "loop = 1"
    loop = loop + 1
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    """ Website Blocker
----------------------------------------
"""
import time
from datetime import datetime as dt
hosts_path = r"/etc/hosts"   
#r is for raw string
hosts_temp = "hosts"
redirect = "127.0.0.1"
#users can modify the list of the websites they want to block
web_sites_list = ["www.facebook.com", "facebook.com"]    
while True:
   if dt(dt.now().year, dt.now().month, dt.now().day, 9) < dt.now() < dt(dt.now().year, dt.now().month, dt.now().day,22):
       print("Working hours")
       with open(hosts_path, "r+") as file:
           content = file.read()
           for website in web_sites_list:
               if website in content:
                   pass
               else:
                   file.write(redirect+" "+website+"\n")
   else:
       print("Fun time")
       with open(hosts_path, "r+") as file:
           content = file.readlines()
           file.seek(0)  # reset the pointer to the top of the text file
           for line in content:
               #here comes the tricky line, basically we overwrite the whole file
               if not any(website in line for website in web_sites_list):
                   file.write(line)
               #do nothing otherwise
           file.truncate() #this line is used to delete the trailing lines (that contain DNS)
    time.sleep(5);
            
